#version 460

layout (local_size_x = 8, local_size_y = 8) in; // 线程组大小 8x8

layout (binding = 0) uniform sampler2D srcImage; // 输入图像

layout (binding = 1, rgba8) uniform writeonly image2D dstImage; // 输出图像

layout (binding = 2) uniform UBO {
    vec2 srcSize;    // 输入尺寸 (1080, 1920)
    vec2 dstSize;    // 输出尺寸 (128, 128)
    vec2 padding;    // 上下填充量 (0, 15.5)
} ubo;

void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    if (uv.x >= int(ubo.dstSize.x) || uv.y >= int(ubo.dstSize.y)) {
        return;
    }

    // 计算归一化坐标 (考虑填充)
    vec2 normUV = (vec2(uv) - ubo.padding) / ubo.dstSize;
    if (normUV.y < 0.0 || normUV.y > 1.0) {
        // 填充区域写黑色
        imageStore(dstImage, uv, vec4(0, 0, 0, 1));
        return;
    }

    // 从原图采样
    vec2 srcUV = normUV * ubo.srcSize;
    vec4 color = textureLod(srcImage, srcUV / ubo.srcSize, 0);
    imageStore(dstImage, uv, color);
}